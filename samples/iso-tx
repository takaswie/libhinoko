#!/usr/bin/env python3

from threading import Timer
from struct import unpack

import gi
gi.require_version('GLib', '2.0')
from gi.repository import GLib
gi.require_version('Hinoko', '0.0')
from gi.repository import Hinoko

class IsoTx(Hinoko.FwIsoTx):
    def new(self, path, channel, maximum_bytes_per_payload):
        # Use 8 byte header.
        self.header = [i for i in range(8)]
        self.payload = \
                [i for i in range(maximum_bytes_per_payload - len(self.header))]

        self.allocate(path, Hinoko.FwScode.S400, channel, len(self.header))

        self.packets_per_irq = 8
        self.map_buffer(maximum_bytes_per_payload, self.packets_per_irq * 4)

        self.channel = channel

    def destroy(self):
        self.unmap_buffer()
        self.release()

    def begin(self, dispatcher, timer):
        self.__src = self.create_source()
        self.__src.attach(dispatcher.get_context())
        self.__dispatcher = dispatcher
        self.__timer = timer

        self.tag = Hinoko.FwIsoCtxMatchFlag.TAG1
        self.sy = 0
        self.count = 0

        for i in range(32):
            irq = bool((i + 1) % self.packets_per_irq == 0)
            self.register_packet(self.tag, self.sy, self.header, self.payload,
                                 irq)

        self.start(None)
        self.__timer.start()

    def finish(self):
        self.__src.destroy()
        self.stop()

    def do_stopped(self, error):
        self.__dispatcher.quit()
        if error:
            self.__timer.cancel()
            print(error)

    def do_interrupted(self, sec, cycle, header, header_length, count):
        headers = unpack('>{0}I'.format(header_length // 4), header)
        for i in range(count):
            self.count += 1
            irq = bool(self.count % self.packets_per_irq == 0)
            self.register_packet(self.tag, self.sy, self.header, self.payload,
                                 irq)

            tstamp = headers[i]
            sec = (tstamp & 0x0000e000) >> 13
            cycle = tstamp & 0x00001fff
            iso_header = (len(self.payload) << 16) | \
                         (self.tag << 14) | \
                         (self.channel << 8) | \
                         (0xa << 4) | \
                         self.sy
            print('{0:2d} {1:4d} {2:08x}'.format(sec, cycle, iso_header))

channel = 30
maximum_bytes_per_payload = 32

ctx = IsoTx()
ctx.new('/dev/fw0', channel, maximum_bytes_per_payload)

dispatcher = GLib.MainLoop.new(None, False)

# Finish event loop after 4 seconds.
timer = Timer(4, lambda dispatcher: dispatcher.quit(), args=(dispatcher, ))

ctx.begin(dispatcher, timer)
dispatcher.run()
ctx.finish()
ctx.destroy()

del dispatcher
del ctx
