#!/usr/bin/env python3

from threading import Timer
from struct import unpack,pack

import gi
gi.require_version('GLib', '2.0')
from gi.repository import GLib
gi.require_version('Hinoko', '0.0')
from gi.repository import Hinoko

class IsoTx(Hinoko.FwIsoTx):
    def new(self, path, channel, maximum_bytes_per_payload):
        # Use 8 byte header for CIP header.
        cip_header_size = 8
        self.cip_payload = [i for i in range(maximum_bytes_per_payload)]

        self.allocate(path, Hinoko.FwScode.S400, channel, cip_header_size)

        payloads_per_buffer = 32
        self.map_buffer(maximum_bytes_per_payload, payloads_per_buffer)

        self.channel = channel

    def destroy(self):
        self.unmap_buffer()
        self.release()

    def begin(self, dispatcher, duration):
        self.__src = self.create_source()
        self.__src.attach(dispatcher.get_context())
        self.__dispatcher = dispatcher

        # Roughly finish event loop.
        self.__timer = Timer(duration, lambda dispatcher: dispatcher.quit(),
                             args=(dispatcher,))

        self.tag = Hinoko.FwIsoCtxMatchFlag.TAG1
        self.sy = 0

        cycle_timer = Hinoko.CycleTimer.new()
        clock_id = 4    # CLOCK_MONOTONIC_RAW
        cycle_timer = self.get_cycle_timer(clock_id, cycle_timer)
        (sec, cycle, tick) = cycle_timer.get_cycle_timer()

        # Start 100 msec later.
        cycle += 800
        if cycle >= 8000:
            cycle %= 8000
            sec += 1
            if sec >= 128:
                sec %= 128

        # Scheduling is available with lower 2 bits of second field.
        cycle_match = (sec & 0x3, cycle)

        # The packets for buffer are queued with skip flag.
        packets_per_irq = 4
        self.__cycles = [sec, cycle]
        self.__increment_cycle(packets_per_irq * 2)

        self.__timer.start()
        self.start(cycle_match, packets_per_irq)

    def __increment_cycle(self, addend):
        sec, cycle = self.__cycles
        cycle += addend
        if cycle >= 8000:
            cycle %= 8000
            sec += 1
            if sec >= 128:
                sec %= 128
        self.__cycles[0] = sec
        self.__cycles[1] = cycle

    def finish(self):
        self.__src.destroy()
        self.stop()

    def do_stopped(self, error):
        self.__dispatcher.quit()
        if error:
            self.__timer.cancel()
            print(error)

    @staticmethod
    def __ohci1394_tstamp_to_isoc_cycle(tstamp):
        sec = (tstamp & 0x0000e000) >> 13
        cycle = tstamp & 0x00001fff
        return (sec, cycle)

    def do_interrupted(self, sec, cycle, header, header_length, count):
        tstamps = unpack('>{0}I'.format(header_length // 4), header)
        for i in range(count):
            # Schedule packet at the completed isochronous cycle plus packets per buffer. The header
            # of packet has data for the completed isochronous cycle.
            sec, cycle = self.__cycles
            cip_header = pack('>2I', sec, cycle)
            self.register_packet(self.tag, self.sy, cip_header, self.cip_payload)
            self.__increment_cycle(1)

            # Print the data of packet already sent.
            sec, cycle = self.__ohci1394_tstamp_to_isoc_cycle(tstamps[i])
            iso_header = (len(self.cip_payload) << 16) | \
                         (self.tag << 14) | \
                         (self.channel << 8) | \
                         (0xa << 4) | \
                         self.sy
            print('{0:2d},{1:4d},{2:08x},{3}'.format(sec, cycle, iso_header, i))

channel = 30
maximum_bytes_per_payload = 32

ctx = IsoTx()
ctx.new('/dev/fw0', channel, maximum_bytes_per_payload)

dispatcher = GLib.MainLoop.new(None, False)

ctx.begin(dispatcher, 4)
dispatcher.run()
ctx.finish()
ctx.destroy()

del dispatcher
del ctx
