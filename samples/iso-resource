#!/usr/bin/env python3

from pathlib import Path
from sys import argv, exit
import traceback

from threading import Thread
from contextlib import AbstractContextManager, contextmanager

import gi

gi.require_versions({"GLib": "2.0", "Hinoko": "1.0"})
from gi.repository import GLib, Hinoko

BYTES_PER_PAYLOAD = (2 + 8 * 3) * 4
USE_CHANNEL = 10
USE_BANDWIDTH = Hinoko.FwIsoResource.calculate_bandwidth(
    BYTES_PER_PAYLOAD, Hinoko.FwScode.S400
)
TIMEOUT_MS = 100


# Just for printing events, no functional purpose.
def handle_resource_signal(
    res: Hinoko.FwIsoResource,
    channel: int,
    bandwidth: int,
    error: GLib.Error,
    label: str,
):
    print("event:", label)
    if error is None:
        print("  ", channel, bandwidth, res.get_property("generation"))
    elif error.matches(
        Hinoko.fw_iso_resource_error_quark(), Hinoko.FwIsoResourceError.EVENT
    ):
        print("  ", error)


# For Once mode. The allocation is bound to current generation of the bus and lost automatically by
# bus reset without notification.
def main_once(res: Hinoko.FwIsoResourceAuto, ctx: GLib.MainContext):
    _, src = res.create_source()
    _ = src.attach(ctx)

    handler_id_allocated = res.connect("allocated", handle_resource_signal, "allocated")
    handler_id_deallocated = res.connect(
        "deallocated", handle_resource_signal, "deallocated"
    )

    for i in range(2):
        res.allocate_wait((USE_CHANNEL,), USE_BANDWIDTH, TIMEOUT_MS)
        print("result: allocate")
        print("  ", USE_CHANNEL, USE_BANDWIDTH, res.get_property("generation"))

        res.deallocate_wait(USE_CHANNEL, USE_BANDWIDTH, TIMEOUT_MS)
        print("result: deallocate")
        print("  ", USE_CHANNEL, USE_BANDWIDTH, res.get_property("generation"))

    res.disconnect(handler_id_deallocated)
    res.disconnect(handler_id_allocated)
    src.destroy()


# For Auto mode. The allocation is kept by Linux FireWire subsystem as long as the lifetime of
# file descriptor. The instance of object represents state machine.
def main_auto(res: Hinoko.FwIsoResourceAuto, ctx: GLib.MainContext):
    def print_props(res):
        for prop in ("is-allocated", "channel", "bandwidth", "generation"):
            print("  {}: {}".format(prop, res.get_property(prop)))

    _, src = res.create_source()
    _ = src.attach(ctx)

    handler_id_allocated = res.connect("allocated", handle_resource_signal, "allocated")
    handler_id_deallocated = res.connect(
        "deallocated", handle_resource_signal, "deallocated"
    )

    print_props(res)

    for i in range(2):
        res.allocate_wait([USE_CHANNEL], USE_BANDWIDTH, TIMEOUT_MS)
        print("result: allocate")
        print_props(res)

        res.deallocate_wait(TIMEOUT_MS)
        print("result: deallocate")
        print_props(res)

    res.disconnect(handler_id_deallocated)
    res.disconnect(handler_id_allocated)
    src.destroy()


@contextmanager
def run_dispatcher() -> AbstractContextManager[GLib.MainContext]:
    ctx = GLib.MainContext.new()
    dispatcher = GLib.MainLoop.new(ctx, False)

    th = Thread(target=lambda d: d.run(), args=(dispatcher,))
    th.start()

    try:
        yield ctx
    finally:
        dispatcher.quit()
        th.join()


def multithread_main(path: Path) -> int:
    res_once = Hinoko.FwIsoResourceOnce.new()
    res_once.open(str(path), 0)

    res_auto = Hinoko.FwIsoResourceAuto.new()
    res_auto.open(str(path), 0)

    try:
        with run_dispatcher() as ctx:
            main_once(res_once, ctx)
            main_auto(res_auto, ctx)
    except GLib.Error as e:
        error_domain_map = {
            GLib.file_error_quark(): GLib.FileError,
            Hinoko.fw_iso_resource_error_quark(): Hinoko.FwIsoResourceError,
            Hinoko.fw_iso_resource_auto_error_quark(): Hinoko.FwIsoResourceAutoError,
        }
        quark = GLib.quark_from_string(e.domain)
        if quark in error_domain_map:
            code_nick = error_domain_map[quark](e.code).value_nick
            print(
                "GLib.Error exception: '{}' due to '{}' in '{}'".format(
                    e.message, code_nick, e.domain
                )
            )
            print()
        traceback.print_exception(e)
        return 1
    except Exception as e:
        traceback.print_exception(e)
        return 1

    return 0


def main() -> int:
    if len(argv) < 2:
        print(
            "One argument is required for path to special file of Linux FireWire character "
            "device"
        )
        return 1

    path = Path(argv[1])
    if not path.exists() or not path.is_char_device() or path.name.find("fw") != 0:
        print("{} is invalid for Linux FireWire character device".format(path))
        return 1

    return multithread_main(path)


if __name__ == "__main__":
    exit(main())
